package dmit2015.johnpetere.assignment03.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.Getter;
import lombok.Setter;

import java.io.Serializable;
import java.time.LocalDateTime;

@Setter
@Getter


@Entity

@Table(name = "oscarreview")
/**
 * @author: John-Peter Eberhard
 * @version: 1.0
 * @date:  2021-01-04
 * enity class OscarReview Reversed engineered
 */
// Aqreyllina is used for intergration tests
public class OscarReview implements  Serializable{
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // remove this if it is generated by database
    // hqldb uses Identity
    // oracle uses sequences
    public Long id;
    // make sure that unit testing is done by failing the constraints to test them shouldCreateFail() method
    @Column(nullable = false)
    @NotBlank(message = "category is required")
    // make Category only: film, actor, actress, editing, or effects
    // use a regular expression to validate
    // (film | actor | actress | editing | effects )
    @Pattern(regexp = "(?:^film$|^actor$|^actress$|^editing$|^effects$)", message = "must be only film, actor, actress, editing or effects")
    private String category;
    @Column(nullable = false)
    @NotBlank(message = "review is required")

    private String review;
    @Column(nullable = false)
    @NotBlank(message = "username is required")

    private String username;

    @Column(nullable = false)
    @NotBlank(message = "nominee is required")
    private String nominee;
    private LocalDateTime createdDateTIme;
    private LocalDateTime lastModifiedDateTime;

    @PrePersist
    private void beforePersist(){
        createdDateTIme = LocalDateTime.now();
        lastModifiedDateTime = createdDateTIme;
    }
    @PreUpdate
    private void beforeUpdate(){lastModifiedDateTime = LocalDateTime.now();}

    public OscarReview() {

    }
}

